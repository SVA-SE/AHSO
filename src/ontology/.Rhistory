setwd("C:/Users/fernanda.dorea/OneDrive – STATENS VETERINARMEDICINSKA ANSTALT/3-ASF covetlab/ASF-WB")
?match
a = c(1,1,1,2)
b=2
match(a,b)
match(b,a)
install.packages("vetsyn", repos="http://siminf.org/R")
?install.packages
install.packages("opencpu")
library(opencpu)
install.packages("rbookdown")
install.packages("bookdown")
source('I:/ESS/R/ASF_R/Scripts Joao/Gallande only script.R', echo=TRUE)
?spread
require(tidyr)
install.packages("tidyr")
require(tidyr)
?spread
load("I:/ESS/R/ASF_R/pigdata.Rdata")
head(farms)
head(movements)
jpt <- read.csv2("I:\\ESS\\R\\ASF_RKRAV_pigs_jord på trynet.csv")
jpt <- read.csv2("I:\\ESS\\R\\ASF_R\\KRAV_pigs_jord på trynet.csv")
head(jpt)
farms[farms$ppn%in%jpt$Ppn,]
head(movements)
table(movements$type)
table(movements$event_type)
movements_source_jpt <- movements[movements$source%in%jpt$Ppn,]
dim(movements)
dim(movements_source_jpt)
movements_dest_jpt <- movements[movements$destination%in%jpt$Ppn,]
dim(movements_movements_dest_jpt_jpt)
dim(movements_dest_jpt)
table(movements$event_type)
table(movements_source_jpt$event_type)
table(movements_dest_jpt$event_type)
726/48905
mvm_out <- vector()
mvm_in  <- vector()
for (i in 1:length(farms$ppn)){
mvm_out[i] <- sum(movements$source==farms$ppn[i]) #number of recorded mvm with farm as source
mvm_in[i]  <- sum(movements$destination==farms$ppn[i]) #number of recorded mvm with farm as source
}
total_mvm <- mvm_out + mvm_in
hist(mvm_out)
hist(mvm_in)
hist(total_mvm)
hist(mvm_out)
hist(mvm_in)
hist(total_mvm)
vline(100)
?abline
hist(mvm_out)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="red",lty=2)
hist(mvm_in)
abline(v=mean(mvm_in[farms$ppn%in%jpt$Ppn]),col="red",lty=2)
farms$ppn%in%jpt$Ppn
mvm_in
mean(mov_in)
mean(mvm_in)
mean(mvm_in[farms$ppn%in%jpt$Ppn])
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
mvm_out
mvm_out[farms$ppn%in%jpt$Ppn]
mvm_in
mvm_in[farms$ppn%in%jpt$Ppn]
mvm_in[farms$ppn%in%jpt$Ppn]
mean(mvm_in[farms$ppn%in%jpt$Ppn])
mean(mvm_in)
hist(mvm_in)
abline(v=mean(mvm_in),col="red",lty=2)
abline(v=mean(mvm_in[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
hist(total_mvm)
abline(v=mean(total_mvm),col="red",lty=2)
abline(v=mean(total_mvm[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
?mtext
?text
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), labels=mean(mvm_out), col="red")
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), labels=paste0("all farms average=",round(mean(mvm_out),3), col="red", pos=4)
paste0("all farms average=",round(mean(mvm_out),3)
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), labels=paste0("all farms average=",round(mean(mvm_out),3)), col="red", pos=4)
text(x=mean(mvm_out), y=300, labels=paste0("all farms average=",round(mean(mvm_out),3)), col="red", pos=4)
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), y=300, labels=paste0("all farms average=",round(mean(mvm_out),3)), col="red", pos=4)
text(xmean(mvm_out[farms$ppn%in%jpt$Ppn]),
y=205, labels=paste0("all farms average=",round(mean(mvm_out[farms$ppn%in%jpt$Ppn]),3)), col="blue", pos=4)
text(xmean(mvm_out[farms$ppn%in%jpt$Ppn]),
y=205, labels=paste0("KRAV farms=",round(mean(mvm_out[farms$ppn%in%jpt$Ppn]),3)), col="blue", pos=4)
text(x=mean(mvm_out[farms$ppn%in%jpt$Ppn]),
y=205, labels=paste0("KRAV farms=",round(mean(mvm_out[farms$ppn%in%jpt$Ppn]),3)), col="blue", pos=4)
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), y=300, labels=paste0("all farms average=",round(mean(mvm_out),2)), col="red", pos=4)
text(x=mean(mvm_out[farms$ppn%in%jpt$Ppn]),
y=205, labels=paste0("KRAV farms=",round(mean(mvm_out[farms$ppn%in%jpt$Ppn]),2)), col="blue", pos=4)
hist(mvm_in)
abline(v=mean(mvm_in),col="red",lty=2)
abline(v=mean(mvm_in[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_in), y=300, labels=paste0("all farms average=",round(mean(mvm_in),2)), col="red", pos=4)
text(x=mean(mvm_in[farms$ppn%in%jpt$Ppn]),
y=205, labels=paste0("KRAV farms=",round(mean(mvm_in[farms$ppn%in%jpt$Ppn]),2)), col="blue", pos=4)
hist(mvm_out)
abline(v=mean(mvm_out),col="red",lty=2)
abline(v=mean(mvm_out[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_out), y=300, labels=paste0("all farms average=",round(mean(mvm_out),2)), col="red", pos=4)
text(x=mean(mvm_out[farms$ppn%in%jpt$Ppn]),
y=200, labels=paste0("KRAV farms=",round(mean(mvm_out[farms$ppn%in%jpt$Ppn]),2)), col="blue", pos=4)
hist(mvm_in)
abline(v=mean(mvm_in),col="red",lty=2)
abline(v=mean(mvm_in[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(mvm_in), y=600, labels=paste0("all farms average=",round(mean(mvm_in),2)), col="red", pos=4)
text(x=mean(mvm_in[farms$ppn%in%jpt$Ppn]),
y=400, labels=paste0("KRAV farms=",round(mean(mvm_in[farms$ppn%in%jpt$Ppn]),2)), col="blue", pos=4)
hist(total_mvm)
abline(v=mean(total_mvm),col="red",lty=2)
abline(v=mean(total_mvm[farms$ppn%in%jpt$Ppn]),col="blue",lty=2)
text(x=mean(total_mvm), y=600, labels=paste0("all farms average=",round(mean(total_mvm),2)), col="red", pos=4)
text(x=mean(total_mvm[farms$ppn%in%jpt$Ppn]),
y=400, labels=paste0("KRAV farms=",round(mean(total_mvm[farms$ppn%in%jpt$Ppn]),2)), col="blue", pos=4)
boxplot(mvm_out,mvm_out[farms$ppn%in%jpt$Ppn])
boxplot(mvm_out,mvm_out[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
boxplot(mvm_in,mvm_in[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
boxplot(total_mvm,total_mvm[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
boxplot(mvm_out,mvm_out[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
boxplot(mvm_in,mvm_in[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
boxplot(total_mvm,total_mvm[farms$ppn%in%jpt$Ppn], names=c("all pig farms","KRAV"))
install.packages("streamgraph")
library(devtools)
install.packages("devtools")
set.seed(1)
m <- 500
n <- 50
x <- seq(m)
x
y <- matrix(0, nrow=m, ncol=n)
y
colnames(y) <- seq(n)
for(i in seq(ncol(y))){
mu <- runif(1, min=0.25*m, max=0.75*m)
SD <- runif(1, min=5, max=30)
TMP <- rnorm(1000, mean=mu, sd=SD)
HIST <- hist(TMP, breaks=c(0,x), plot=FALSE)
fit <- smooth.spline(HIST$counts ~ HIST$mids)
y[,i] <- fit$y
}
mu
SD
TMP
HIST
fit
y <- replace(y, y<0.01, 0)
y
ord <- order(apply(y, 2, function(r) min(which(r>0))))
y2 <- y[, ord]
COLS <- rainbow(ncol(y2))
par(mar=c(0,0,0,0), bty="n")
plot.stream(x,y2, axes=FALSE, xlim=c(100, 400), xaxs="i", center=TRUE, spar=0.2, frac.rand=0.1, col=COLS, border=1, lwd=0.1)
library(devtools)
source_url('https://gist.github.com/menugget/7864454/raw/f698da873766347d837865eecfa726cdf52a6c40/plot.stream.4.R')
plot.stream(x,y2, axes=FALSE, xlim=c(100, 400), xaxs="i", center=TRUE, spar=0.2, frac.rand=0.1, col=COLS, border=1, lwd=0.1)
x
str(y2)
dim(y)
head(Y)
head(y)
install.packages(c("assertthat", "backports", "bookdown", "chron", "colorspace", "cubature", "data.table", "DBI", "dplyr", "evaluate", "gdata", "ggplot2", "htmltools", "httpuv", "knitr", "manipulate", "mapproj", "maps", "markdown", "np", "opencpu", "openxlsx", "polyCub", "proto", "protolite", "Rcpp", "reshape2", "rgdal", "rmarkdown", "scales", "shiny", "SimInf", "sourcetools", "sp", "stringi", "surveillance", "tibble", "tidyr", "tseries", "zoo"))
install.packages("rJava")
.libPaths(
)
require(rJava)
.libPaths()
.libPaths("C:/Users/fernanda.dorea/Documents/R/win-library/3.3")
.libPaths()
?.libPaths
.libPaths(.libPaths()[1])
?.libPaths
.libPaths()
.libPaths()
.libPaths()
.libPaths()
load("C:/Users/fernanda.dorea/Downloads/test.rdata")
plot(my.syndromic)
plot(my.syndromic1)
plot_syndromic(my.syndromic1)
plot(my.syndromic1)
install_github("nandadorea/vetsyn")
require(vetsyn)
require(devtools)
install_github("nandadorea/vetsyn")
require(vetsyn)
plot(my.syndromic1)
plot(my.syndromic)
plot(my.syndromic1)
plot_syndromic(my.syndromic1)
plot(my.syndromic1)
install_github("nandadorea/vetsyn")
require(vetsyn)
plot(my.syndromic)
plot_syndromic(my.syndromic1)
plot(my.syndromic1)
plot(my.syndromic)
plot(my.syndromic1)
install.packages("babynames")
data(babynames)
require(babynames)
data(babynames)
head(babynames)
?filter
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages(c("nycflights13", "gapminder", "Lahman"))
dput(mtcars)
require(DOT)
dot("digraph {A -> B;}")
dot("
digraph {
'sample' -> 'observation' [label= 'is a member of context'];
'observation' -> 'observation context' [label= 'is a member of context'];
'observation context' -> 'observation' [label= 'has context member'];
'observation' -> 'sample' [label= 'has context member'];
}
")
dot("
digraph {
'sample' -> 'observation'
}
")
dot("
digraph {
"sample" -> "observation" [label= "is a member of context"];
"observation" -> "observation context" [label= "is a member of context"];
"observation context" -> "observation" [label= "has context member"];
"observation" -> "sample" [label= "has context member"];
}
")
dot("
digraph {
"sample" -> "observation" [label= "is a member of context"];
}
")
digraph {
sample -> observation [label= "is a member of context"];
}
")
dot("
digraph {
sample -> observation [label= 'is a member of context'];
}
")
dot("digraph {
sample -> observation [label= 'is a member of context'];
}")
dot("digraph {
sample -> observation;
}")
dot("digraph {
sample -> observation [label= 'a'];
}")
dot("digraph {
sample -> observation [label= a];
}")
dot("digraph {
sample -> observation [label= "a"];
}")
dot("digraph {
sample -> observation [label= 'a'];
}")
dot('digraph {
sample -> observation [label= "a"];
}')
dot('digraph {
"sample" -> "observation" [label= "is a member of context"];
"observation" -> "observation context" [label= "is a member of context"];
"observation context" -> "observation" [label= "has context member"];
"observation" -> "sample" [label= "has context member"];
}')
dot('digraph {
node [shape = box,
fontname = Helvetica]
"sample"; "observation"; "observation context"
"sample" -> "observation" [label= "is a member of context"];
"observation" -> "observation context" [label= "is a member of context"];
"observation context" -> "observation" [label= "has context member"];
"observation" -> "sample" [label= "has context member"];
}')
getwd()
dot('digraph {
node [shape = box,
fontname = Helvetica]
"sample"; "observation"; "observation context"
"sample" -> "observation" [label= "is a member of context"];
"observation" -> "observation context" [label= "is a member of context"];
"observation context" -> "observation" [label= "has context member"];
"observation" -> "sample" [label= "has context member"];
}', file = "myfile.svg")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
install.packages("DiagrammeR")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::mermaid("GitHub/AHSO/src/ontology/ahso.mmd")
DiagrammeR::mermaid("GitHub/AHSO/src/ontology/ahso.mmd")
DiagrammeR::mermaid("GitHub/AHSO/src/ontology/ahso.mmd")
DiagrammeR::mermaid("GitHub/AHSO/src/ontology/ahso.mmd")
DiagrammeR::mermaid("GitHub/AHSO/src/ontology/ahso.mmd")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
DiagrammeR::grViz("GitHub/AHSO/src/ontology/ahso.gv")
?grViz
require(DiagrammeR)
setwd("C:/Users/fernanda.dorea/Documents/GitHub/AHSO/src/ontology")
grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
DiagrammeR::grViz("ahso.gv")
